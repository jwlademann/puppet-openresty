session = require('<%= @nginx_base_dir %>/conf/modules/session');
cookie = require('<%= @nginx_base_dir %>/conf/modules/cookie');

-- Check against list of non-protected endpoints
if  string.find(ngx.var.uri, "^/login_frontend/.*$") or
    string.find(ngx.var.uri, "^/account/.*$") or
    ngx.var.uri == "/account_management_frontend/health" or
    ngx.var.uri == "/page-not-found" or
    ngx.var.uri == "/not-authorised" or
    ngx.var.uri == "/error" or
    string.find(ngx.var.uri, "^/feedback/.*$") or
    ngx.var.uri == "/logout" or
    ngx.var.uri == "/search_llc" or
    ngx.var.uri == "/report/report-informations.csv" or
    string.find(ngx.var.uri, "^/static/.*$") then
    return
end

ngx.log(ngx.NOTICE, 'BEGIN access.lua for ' .. ngx.var.uri)

local accessToken = ngx.var.cookie_AccessToken

if not accessToken then
  ngx.log(ngx.WARN, 'No access token!')

  ngx.header["X-Frame-Options"] = 'sameorigin'
  ngx.header["X-XSS-Protection"] = '1'
  ngx.header["X-Content-Type-Options"] = 'nosniff'

  if string.find(ngx.var.uri, "^/login") then
      return
  end

  cookie.create_new_cookie("Location", ngx.var.uri, ngx.cookie_time(ngx.time() + 300))

  return ngx.redirect('/login')
end

ngx.log(ngx.INFO, 'accessToken: ' .. accessToken)

local valid, callerId = session.valid(accessToken);

if valid == false then
  ngx.header["X-Frame-Options"] = 'sameorigin'
  ngx.header["X-XSS-Protection"] = '1'
  ngx.header["X-Content-Type-Options"] = 'nosniff'

  if string.find(ngx.var.uri, "^/login") then
      return
  end

  cookie.create_new_cookie("Location", ngx.var.uri, ngx.cookie_time(ngx.time() + 300))

  return ngx.redirect('/login')
end

ngx.log(ngx.INFO, 'Successfully verified session for request, callerId = ' .. callerId)

ngx.req.set_header('callerId', callerId)

if string.find(ngx.var.uri, "^/login") then
  return ngx.redirect('/')
end
